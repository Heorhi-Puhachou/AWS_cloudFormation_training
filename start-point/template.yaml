AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  start-point
  Sample SAM Template to study CloudFormation

Resources:
  StartStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaApiGateway
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: arn:aws:states:*:*:*

  DynamoPutRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              # DynamoDB
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: "*"

  GatewayFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [ StartStateMachineRole, Arn ]
      CodeUri: lambda/gateway/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        GatewayFunctionPOST:
          Type: Api
          Properties:
            Path: /test
            Method: post
      Environment:
        Variables:
          firstStateMachineArn: !GetAtt [ FirstStateMachine, Arn ]

  Step1Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/statemachine/step1
      Handler: step1.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64

  Step21Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/statemachine/step2-1
      Handler: step2-1.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64

  Step22Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/statemachine/step2-2
      Handler: step2-2.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64

  Step3Function:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [ DynamoPutRole, Arn ]
      CodeUri: lambda/statemachine/step3
      Handler: step3.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Tracing: Active
      Layers:
        # if the bucket was updated and we need the last version the last number must be updated too.
        - arn:aws:lambda:us-east-1:899012776854:layer:codebase-layer:11
      # Instead of this layer description can be used !ImportValue for layer but in this case
      # staks cannot be updated independently (fails because of strong relation)
      #
      #Layers:
      #  - !ImportValue codebase-layer

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  FirstStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
        - |-
          
          {
            "Comment": "A description of my state machine",
            "StartAt": "Lambda 1",
            "States": {
              "Lambda 1": {
                "Type": "Task",
                "Resource": "${step1}",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "Lambda 1"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Choice"
              },
              "Choice": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.value",
                    "StringMatches": "valid value",
                    "Next": "Lambda 2-1"
                  }
                ],
                "Default": "Lambda 2-2"
              },
              "Lambda 2-1": {
                "Type": "Task",
                "Resource": "${step21}",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "Lambda 2-1"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Lambda 3"
              },
              "Lambda 2-2": {
                "Type": "Task",
                "Resource": "${step22}",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "Lambda 2-2"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Lambda 3"
              },
              "Lambda 3": {
                "Type": "Task",
                "Resource": "${step3}",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "Lambda 3"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              }
            }
          }

        - { step1: !GetAtt [ Step1Function, Arn ],
            step21: !GetAtt [ Step21Function, Arn ],
            step22: !GetAtt [ Step22Function, Arn ],
            step3: !GetAtt [ Step3Function, Arn ] }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "EventId"
          AttributeType: "S"
        - AttributeName: "EventTime"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "EventId"
          KeyType: "HASH"
        - AttributeName: "EventTime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "test-table"
      #not hardcode resource name!!!
      #resource lambda servless!!!

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TestApi:
    Description: "API Gateway endpoint URL to start execute test task code"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/test/"
  GatewayFunction:
    Description: "Gateway function ARN"
    Value: !GetAtt GatewayFunction.Arn
  FirstStateMachine:
    Description: "First state machine"
    Value: !GetAtt FirstStateMachine.Arn
